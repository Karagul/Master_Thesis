function DATA = importfile(filename, startRow, endRow)
%IMPORTFILE Import numeric data from a text file as a matrix.
%   DATA = IMPORTFILE(FILENAME) Reads data from text file FILENAME
%   for the default selection.
%
%   DATA = IMPORTFILE(FILENAME, STARTROW, ENDROW) Reads data from
%   rows STARTROW through ENDROW of text file FILENAME.
%
% Example:
%   DATA = importfile('JAPANESE YEN.csv', 2, 552);
%
%    See also TEXTSCAN.

% Auto-generated by MATLAB on 2017/02/06 20:32:55

%% Initialize variables.
delimiter = ',';
if nargin<=2
    startRow = 2;
    endRow = inf;
end

%% Read columns of data as text:
% For more information, see the TEXTSCAN documentation.
formatSpec = '%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to the format.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, endRow(1)-startRow(1)+1, 'Delimiter', delimiter, 'HeaderLines', startRow(1)-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');
for block=2:length(startRow)
    frewind(fileID);
    dataArrayBlock = textscan(fileID, formatSpec, endRow(block)-startRow(block)+1, 'Delimiter', delimiter, 'HeaderLines', startRow(block)-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');
    for col=1:length(dataArray)
        dataArray{col} = [dataArray{col};dataArrayBlock{col}];
    end
end

%% Close the text file.
fclose(fileID);

%% Convert the contents of columns containing numeric text to numbers.
% Replace non-numeric text with NaN.
raw = repmat({''},length(dataArray{1}),length(dataArray)-1);
for col=1:length(dataArray)-1
    raw(1:length(dataArray{col}),col) = dataArray{col};
end
numericData = NaN(size(dataArray{1},1),size(dataArray,2));

for col=[1,3,5,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,84,86,88,90]
    % Converts text in the input cell array to numbers. Replaced non-numeric
    % text with NaN.
    rawData = dataArray{col};
    for row=1:size(rawData, 1);
        % Create a regular expression to detect and remove non-numeric prefixes and
        % suffixes.
        regexstr = '(?<prefix>.*?)(?<numbers>([-]*(\d+[\,]*)+[\.]{0,1}\d*[eEdD]{0,1}[-+]*\d*[i]{0,1})|([-]*(\d+[\,]*)*[\.]{1,1}\d+[eEdD]{0,1}[-+]*\d*[i]{0,1}))(?<suffix>.*)';
        try
            result = regexp(rawData{row}, regexstr, 'names');
            numbers = result.numbers;
            
            % Detected commas in non-thousand locations.
            invalidThousandsSeparator = false;
            if any(numbers==',');
                thousandsRegExp = '^\d+?(\,\d{3})*\.{0,1}\d*$';
                if isempty(regexp(numbers, thousandsRegExp, 'once'));
                    numbers = NaN;
                    invalidThousandsSeparator = true;
                end
            end
            % Convert numeric text to numbers.
            if ~invalidThousandsSeparator;
                numbers = textscan(strrep(numbers, ',', ''), '%f');
                numericData(row, col) = numbers{1};
                raw{row, col} = numbers{1};
            end
        catch me
        end
    end
end

% Convert the contents of columns with dates to MATLAB datetimes using date
% format string.
try
    dates{3} = datetime(dataArray{3}, 'Format', 'dd-MM-yyy', 'InputFormat', 'yyyy-MM-dd');
catch
    try
        % Handle dates surrounded by quotes
        dataArray{3} = cellfun(@(x) x(2:end-1), dataArray{3}, 'UniformOutput', false);
        dates{3} = datetime(dataArray{3}, 'Format', 'dd-MM-yyy', 'InputFormat', 'yyyy-mm-dd');
    catch
        dates{3} = repmat(datetime([NaN NaN NaN]), size(dataArray{3}));
    end
end
dates = dates(:,3);

%% Split data into numeric and cell columns.
rawNumericColumns = raw(:, [1,3,5,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,84,86,88,90]);
rawCellColumns = raw(:, [2,4,6,83,85,87,89,91]);


%% Replace blank cells with NaN
R = cellfun(@(x) isempty(x) || (ischar(x) && all(x==' ')),rawNumericColumns);
rawNumericColumns(R) = {NaN}; % Replace blank cells

%% Create output variable
DATA = table;
DATA.VarName1 = cell2mat(rawNumericColumns(:, 1));
DATA.Market_and_Exchange_Names = rawCellColumns(:, 1);
DATA.As_of_Date_In_Form_YYMMDD = dates{:, 1};
DATA.Report_Date_as_MM_DD_YYYY = rawCellColumns(:, 2);
DATA.Dealer_Positions_Long_All = cell2mat(rawNumericColumns(:, 7));
DATA.Dealer_Positions_Short_All = cell2mat(rawNumericColumns(:, 8));
DATA.Dealer_Positions_Spread_All = cell2mat(rawNumericColumns(:, 9));
DATA.Asset_Mgr_Positions_Long_All = cell2mat(rawNumericColumns(:, 10));
DATA.Asset_Mgr_Positions_Short_All = cell2mat(rawNumericColumns(:, 11));
DATA.Asset_Mgr_Positions_Spread_All = cell2mat(rawNumericColumns(:, 12));
DATA.Lev_Money_Positions_Long_All = cell2mat(rawNumericColumns(:, 13));
DATA.Lev_Money_Positions_Short_All = cell2mat(rawNumericColumns(:, 14));
DATA.Lev_Money_Positions_Spread_All = cell2mat(rawNumericColumns(:, 15));
DATA.Change_in_Dealer_Long_All = cell2mat(rawNumericColumns(:, 24));
DATA.Change_in_Dealer_Short_All = cell2mat(rawNumericColumns(:, 25));
DATA.Change_in_Dealer_Spread_All = cell2mat(rawNumericColumns(:, 26));
DATA.Change_in_Asset_Mgr_Long_All = cell2mat(rawNumericColumns(:, 27));
DATA.Change_in_Asset_Mgr_Short_All = cell2mat(rawNumericColumns(:, 28));
DATA.Change_in_Asset_Mgr_Spread_All = cell2mat(rawNumericColumns(:, 29));
DATA.Change_in_Lev_Money_Long_All = cell2mat(rawNumericColumns(:, 30));
DATA.Change_in_Lev_Money_Short_All = cell2mat(rawNumericColumns(:, 31));
DATA.Change_in_Lev_Money_Spread_All = cell2mat(rawNumericColumns(:, 32));
DATA.Pct_of_OI_Dealer_Long_All = cell2mat(rawNumericColumns(:, 41));
DATA.Pct_of_OI_Dealer_Short_All = cell2mat(rawNumericColumns(:, 42));
DATA.Pct_of_OI_Dealer_Spread_All = cell2mat(rawNumericColumns(:, 43));
DATA.Pct_of_OI_Asset_Mgr_Long_All = cell2mat(rawNumericColumns(:, 44));
DATA.Pct_of_OI_Asset_Mgr_Short_All = cell2mat(rawNumericColumns(:, 45));
DATA.Pct_of_OI_Asset_Mgr_Spread_All = cell2mat(rawNumericColumns(:, 46));
DATA.Pct_of_OI_Lev_Money_Long_All = cell2mat(rawNumericColumns(:, 47));
DATA.Pct_of_OI_Lev_Money_Short_All = cell2mat(rawNumericColumns(:, 48));
DATA.Pct_of_OI_Lev_Money_Spread_All = cell2mat(rawNumericColumns(:, 49));




